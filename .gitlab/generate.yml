##############################################################################
# Copyright (c) 2019-2021, Lawrence Livermore National Security, LLC and
# RADIUSS project contributors. See the COPYRIGHT file for details.
#
# SPDX-License-Identifier: (MIT)
##############################################################################

# Run a simple jobs to display instructions when no env name was specified.
no-env-name:
  extends: [.on-quartz]
  rules:
    - if: '$MY_ENV_NAME == ""'
      when: always
    - when: never
  stage: setup
  script:
    - echo "Variable \"MY_ENV_NAME\" was not set."
    - echo "\"MY_ENV_NAME\" is required and should point to an existing directory in spack-environments."
    - exit 1

.env_defined:
  rules:
    - if: '$MY_ENV_NAME == ""'
      when: never
    - if: '$CI_JOB_NAME =~ /rm-spack/'
      when: always
    - when: on_success

# Generate CI pipelines for the package in $MY_ENV_NAME
#[get-spack--]
get-spack:
  extends: [.on-quartz,.env_defined]
  stage: setup
  script:
    - scripts/get-spack
#[--get-spack]

#[rm-spack--]
rm-spack:
  extends: [.on-quartz,.env_defined]
  stage: clean
  script:
    - scripts/remove-spack
#[--rm-spack]

.generate-pipeline:
  script:
    - . ${MY_SPACK_PATH}/share/spack/setup-env.sh
    - export SPACK_DISABLE_LOCAL_CONFIG=""
    - export SPACK_USER_CACHE_PATH="${MY_SPACK_USER_CACHE}"
    - spack env activate --without-view spack-environments/${MY_ENV_NAME}
    - spack concretize || spack concretize
    - spack ${MY_SPACK_DEBUG} ci generate
        --artifacts-root "${CI_PROJECT_DIR}/jobs_scratch_dir"
        --output-file "${CI_PROJECT_DIR}/jobs_scratch_dir/pipeline.yml"
    - cp -r spack-environments/${MY_ENV_NAME}/${SYS_TYPE} ${CI_PROJECT_DIR}/jobs_scratch_dir/concrete_environment/
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/jobs_scratch_dir"

# quartz
generate-on-quartz:
  extends: [.generate-pipeline, .on-quartz, .env_defined]
  stage: generate-quartz
  before_script:
    - scripts/print-variables

#[send-variable-child--]
build-on-quartz:
  extends: [.env_defined]
  stage: build
  trigger:
    include:
      - artifact: "jobs_scratch_dir/pipeline.yml"
        job: generate-on-quartz
    strategy: depend
    forward:
      pipeline_variables: true
  needs: [generate-on-quartz]
#[--send-variable-child]

# lassen
generate-on-lassen:
  extends: [.generate-pipeline, .on-lassen, .env_defined]
  stage: generate-lassen
  before_script:
    - scripts/print-variables

build-on-lassen:
  extends: [.env_defined]
  stage: build
  trigger:
    include:
      - artifact: "jobs_scratch_dir/pipeline.yml"
        job: generate-on-lassen
    strategy: depend
    forward:
      pipeline_variables: true
  needs: [generate-on-lassen]
