##############################################################################
# Copyright (c) 2019-2021, Lawrence Livermore National Security, LLC and
# RADIUSS project contributors. See the COPYRIGHT file for details.
#
# SPDX-License-Identifier: (MIT)
##############################################################################

  #[create-unique-path--]
variables:
# Use the umdev LLNL service user to run CI. This prevents from running
# pipelines as an actual user.
  LLNL_SERVICE_USER: bradiuss

# Use the service user workspace. Solves permission issues, stores everything
# at the same location whoever triggers a pipeline.
  CUSTOM_CI_BUILDS_DIR: /usr/workspace/bradiuss/gitlab-runner

  MY_SPACK_PARENT_DIR: ${CUSTOM_CI_BUILDS_DIR}/llnl-stack-${CI_PIPELINE_ID}
  MY_SPACK_PATH: ${CUSTOM_CI_BUILDS_DIR}/llnl-stack-${CI_PIPELINE_ID}/spack
  MY_SPACK_USER_CACHE: /dev/shm/llnl-stack-${CI_PIPELINE_ID}-${CI_JOB_ID}/spack-cache
  #[--create-unique-path]
  MY_SPACK_DEBUG: ""
  MY_ENV_NAME: "none"

# We only do one generation per stage because we found conflicts otherwise
#[one-generate-per-stage--]
stages:
  - setup
  - generate
  - build
  - clean
#[--one-generate-per-stage]

.env_defined:
  rules:
    - if: '$MY_ENV_NAME == "none"'
      when: never
    - if: '$CI_JOB_NAME =~ /rm-spack/'
      when: always
    - when: on_success

.on-quartz:
  tags: [shell, quartz]

.on-lassen:
  tags: [shell, lassen]

# Generate CI pipelines for the package in $MY_ENV_NAME
#[get-spack--]
get-spack:
  extends: [.on-quartz,.env_defined]
  stage: setup
  script:
    - scripts/get-spack
#[--get-spack]

#[rm-spack--]
rm-spack:
  extends: [.on-quartz,.env_defined]
  stage: clean
  script:
    - scripts/remove-spack
#[--rm-spack]

.generate-pipeline:
  script:
    - . ${MY_SPACK_PATH}/share/spack/setup-env.sh
    - export SPACK_DISABLE_LOCAL_CONFIG=""
    - export SPACK_USER_CACHE_PATH="${MY_SPACK_USER_CACHE}"
    - spack env activate --without-view spack-environments/${MY_ENV_NAME}
    - spack concretize || spack concretize
    - spack ${MY_SPACK_DEBUG} ci generate
        --artifacts-root "${CI_PROJECT_DIR}/jobs_scratch_dir"
        --output-file "${CI_PROJECT_DIR}/jobs_scratch_dir/pipeline.yml"
    - cp -r spack-environments/${MY_ENV_NAME}/${SYS_TYPE} ${CI_PROJECT_DIR}/jobs_scratch_dir/concrete_environment/
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/jobs_scratch_dir"

include:
  - local: spack-environments/${MY_ENV_NAME}/pipeline.yml
